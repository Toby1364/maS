namespace array {
    func push(arr: Table, val: Any) {
        lua { table.insert(std__array__arr, std__array__val) }
    }

    func pop(arr: Table) -> Any {
        lua { return table.remove(std__array__arr) }
    }

    func insert(arr: Table, index: Num, val: Any) {
        lua { table.insert(std__array__arr, std__array__index, std__array__val) }
    }

    func remove(arr: Table, index: Num) -> Any {
        lua { return table.remove(std__array__arr, std__array__index+1) }
    }

    func unpack(arr: Table) -> Any {
        lua { return table.unpack(std__array__arr) }
    }

    func index_of(arr: Table, val: Any) -> Num {
        let mut i: Num = 0;
        while i < #arr {
            if arr[i] == val { return i }
            i += 1;
        }
        return nil;
    }

    func reverse(arr: Table) {
        let mut i: Num = 0;
        let mut j: Num = #arr - 1;
        while i < j {
            let tmp: Any = arr[i];
            arr[i] = arr[j];
            arr[j] = tmp;
            i += 1;
            j -= 1;
        }
    }

    func sort(arr: Table, compare: Any) { // optional arg
        lua { table.sort(std__array__arr, std__array__compare) }
    }

    func join(arr: Table, sep: Str) -> Str {
        lua { return table.concat(std__array__arr, std__array__sep) }
    }

    func slice(arr: Table, first: Num, last: Num) -> Table {
        let mut out: Table = [];
        let mut i: Num = first;
        while i < last && i < #arr {
            push(out, arr[i]);
            i += 1;
        }
        return out;
    }
}
